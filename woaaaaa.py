# -*- coding: utf-8 -*-
"""woaaaaa.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yHtuSPhBVJs_5cBKFosDnPOzX5GcUvK2
"""

from google.colab import files
import csv
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objs as go
from plotly.tools import make_subplots

def remove_special_characters(text):
    cleaned_text = ''.join(char for char in text if char.isprintable())
    return cleaned_text

def process_txt_file():
    uploaded_files = files.upload()  # Upload the .txt file
    filename = list(uploaded_files.keys())[0]  # Get the uploaded filename

    # Read the content of the file
    with open(filename, 'r') as file:
        lines = file.readlines()

    # Remove the first line
    lines = lines[1:]

    content = ''.join(lines)  # Join the remaining lines into a single string
    content = content.replace('\n', '')  # Remove all line breaks
    lines = content.split('data=')  # Split the content based on 'data='

    data_rows = []  # List to store transformed data

    for line in lines:
        if line:  # Only process non-empty lines
            processed_line = line.replace('data=', '')  # Remove 'data='
            cleaned_line = remove_special_characters(processed_line)  # Remove special characters
            data_list = cleaned_line.split(',')  # Split by ','

            # Skip if there are empty values
            if '' in data_list:
                continue

            seconds = int(data_list[-1])  # Convert the last element to an integer and store it in seconds variable
            data_list = [int(val.strip("'")) for val in data_list[:-1]]  # Convert other elements to integers and remove single quotes

            # Add 0 to empty parts
            while len(data_list) < 8:
                data_list.append(0)

            data_list.insert(0, seconds)  # Add seconds as the first element
            data_rows.append(data_list)  # Add the transformed data to the list

    # Save as .csv file
    output_filename = 'transformed_data.csv'
    with open(output_filename, 'w', newline='') as csv_file:
        writer = csv.writer(csv_file)
        writer.writerow(['Time', 'L1', 'L2', 'L3', 'L4', 'L5', 'L6', 'L7', 'L8', 'L9'])  # Write the header
        writer.writerows(data_rows)  # Write the data

    return output_filename

# Example usage
transformed_file = process_txt_file()

# .csv 파일 로드
df = pd.read_csv(transformed_file)

# loc1부터 loc9까지의 열을 변형
for i in range(1, 10):
    x = df['L' + str(i)]  # 수정: 열 이름 변경
    y = 4.845 * np.exp(-x / -407.1) + 49.826
    df['L' + str(i)] = y  # 수정: 열 이름 변경

# 54.671 값을 가진 나머지 부분을 공백으로 처리
df.loc[:, 'L1':'L9'] = df.loc[:, 'L1':'L9'].where(df.loc[:, 'L1':'L9'] != 54.671, np.nan)

# 변형된 DataFrame을 새로운 .csv 파일로 저장
new_file = 'Left Signal.csv'
df.to_csv(new_file, index=False)

# 변형된 파일을 로컬로 다운로드
files.download(new_file)

def process_txt_file():
    uploaded_files = files.upload()  # Upload the .txt file
    filename = list(uploaded_files.keys())[0]  # Get the uploaded filename

    # Read the content of the file
    with open(filename, 'r') as file:
        lines = file.readlines()

    # Remove the first line
    lines = lines[1:]

    content = ''.join(lines)  # Join the remaining lines into a single string
    content = content.replace('\n', '')  # Remove all line breaks
    lines = content.split('data=')  # Split the content based on 'data='

    data_rows = []  # List to store transformed data

    for line in lines:
        if line:  # Only process non-empty lines
            processed_line = line.replace('data=', '')  # Remove 'data='
            cleaned_line = remove_special_characters(processed_line)  # Remove special characters
            data_list = cleaned_line.split(',')  # Split by ','

            # Skip if there are empty values
            if '' in data_list:
                continue

            seconds = int(data_list[-1])  # Convert the last element to an integer and store it in seconds variable
            data_list = [int(val.strip("'")) for val in data_list[:-1]]  # Convert other elements to integers and remove single quotes

            # Add 0 to empty parts
            while len(data_list) < 8:
                data_list.append(0)

            data_list.insert(0, seconds)  # Add seconds as the first element
            data_rows.append(data_list)  # Add the transformed data to the list

    # Save as .csv file
    output_filename = 'transformed_data.csv'
    with open(output_filename, 'w', newline='') as csv_file:
        writer = csv.writer(csv_file)
        writer.writerow(['Time', 'R1', 'R2', 'R3', 'R4', 'R5', 'R6', 'R7', 'R8', 'R9'])  # Write the header
        writer.writerows(data_rows)  # Write the data

    return output_filename

# Example usage
transformed_file = process_txt_file()

# .csv 파일 로드
df = pd.read_csv(transformed_file)

# loc1부터 loc9까지의 열을 변형
for i in range(1, 10):
    x = df['R' + str(i)]  # 수정: 열 이름 변경
    y = 4.845 * np.exp(-x / -407.1) + 49.826
    df['R' + str(i)] = y  # 수정: 열 이름 변경

# 54.671 값을 가진 나머지 부분을 공백으로 처리
df.loc[:, 'R1':'R9'] = df.loc[:, 'R1':'R9'].where(df.loc[:, 'R1':'R9'] != 54.671, np.nan)


# 변형된 DataFrame을 새로운 .csv 파일로 저장
new_file = 'Right Signal.csv'
df.to_csv(new_file, index=False)

# 변형된 파일을 로컬로 다운로드
files.download(new_file)

# left.csv 파일 로드
left_df = pd.read_csv('Left Signal.csv')

# right.csv 파일 로드
right_df = pd.read_csv('Right Signal.csv')

# 새로운 DataFrame 생성
new_columns = ['Time', 'L1', 'L2', 'L3', 'L4', 'L5', 'L6', 'L7', 'L8', 'L9', 'R1', 'R2', 'R3', 'R4', 'R5', 'R6', 'R7', 'R8', 'R9']
new_df = pd.DataFrame(columns=new_columns)

# 시간 열 추가
new_df['Time'] = left_df['Time']

# 위치1부터 위치9까지의 값을 대입
for i in range(1, 10):
    new_df['L' + str(i)] = left_df['L' + str(i)]
    new_df['R' + str(i)] = right_df['R' + str(i)]

# 새로운 .csv 파일로 저장
combined_file = 'Combined_Data.csv'
new_df.to_csv(combined_file, index=False)

# 새로운 파일을 로컬로 다운로드
files.download(combined_file)

import pandas as pd
import plotly.express as px
import plotly.graph_objs as go

# CSV 파일 읽기
df = pd.read_csv(combined_file)

# 데이터 형태 변환
df = df.melt(id_vars='Time', var_name='loc', value_name='Pressure')
df = df[df['Pressure'] != 0]  # 압력값이 0인 행 삭제

# 'Pressure' 열을 실수형(float)으로 변환
df['Pressure'] = pd.to_numeric(df['Pressure'], errors='coerce')



# 정수형으로 변환
df['Time'] = df['Time'].astype(int)

# NaN 값을 0으로 대체
df['Pressure'] = df['Pressure'].fillna(0)

# 정수형으로 변환
df['Pressure'] = df['Pressure'].astype(int)

df = df[df['Pressure'] != 0]  # 압력값이 0인 행 삭제


# 데이터를 시간(Time) 순으로 정렬
df = df.sort_values('Time')

# 위치 좌표 설정
locations = {
    'L1': (-95, 80),
    'L2': (-145, 41),
    'L3': (-177, 168),
    'L4': (-90, 500),
    'L5': (-150, 520),
    'L6': (-205, 430),
    'L7': (-101, 650),
    'L8': (-170, 660),
    'L9': (-210, 535),
    'R1': (100, 80),
    'R2': (153, 50),
    'R3': (190, 160),
    'R4': (100, 495),
    'R5': (155, 520),
    'R6': (215, 424),
    'R7': (110, 650),
    'R8': (170, 660),
    'R9': (220, 540)
}

# 그래프 생성
fig1 = px.scatter(df, x=[locations.get(loc, (0, 0))[0] for loc in df['loc']],
                  y=[locations.get(loc, (0, 0))[1] for loc in df['loc']],
                  animation_frame='Time', hover_name='loc',
                  range_x=[-500, 500], range_y=[0, 800], title='Left Pressure(kPa)',
                  color='Pressure', color_continuous_scale='YlOrRd',
                  range_color=[0, 1000],  # 범위 설정
                  text='Pressure',
                  width=1000, height=800)

# 각 애니메이션 프레임에 대해 마커 모양 설정
for frame in fig1.frames:
    frame.data[0].marker.symbol = 'square'
    frame.data[0].marker.size = 45

import base64
# set a local image as a background
image_filename = 'insolegroup.png'
plotly_logo = base64.b64encode(open(image_filename, 'rb').read())

fig1.update_layout(
    images=[dict(
        source='data:image/png;base64,{}'.format(plotly_logo.decode()),
        xref="paper", yref="paper",
        x=0.5, y=0.5,
        sizex=1.1, sizey=1.1,
        xanchor="center",
        yanchor="middle",
        opacity=0.4,
        layer="below")])

# 그래프 레이아웃 설정
layout = go.Layout(
    title=dict(
        text='Foot Pressure Sensing (kPa)',
        x=0.5,  # 가운데 정렬
        xanchor='center',
        font=dict(size=18)  # 제목 폰트 크기
    ),
    xaxis=dict(
        title='',
        showticklabels=False,
        zeroline=False,
        showgrid=False # x축 라벨 제거
    ),
    yaxis=dict(
        title='',
        showticklabels=False,
        zeroline=False# y축 라벨 제거
    ),
    plot_bgcolor='rgba(0, 0, 0, 0)',  # 배경 투명하게 설정,

)


# 그래프 플롯
fig1.update_layout(layout)


# 그래프 크기 조정
fig1.update_layout(width=1000, height=800,xaxis=dict(showgrid=False), yaxis=dict(showgrid=False))

# 그래프 표시
fig1.show()

import plotly.express as px

# 그래프 생성
fig1 = px.scatter(df, x=[locations.get(loc, (0, 0))[0] for loc in df['loc']],
                  y=[locations.get(loc, (0, 0))[1] for loc in df['loc']],
                  animation_frame='Time', hover_name='loc',
                  range_x=[-500, 500], range_y=[0, 800], title='Left Pressure(kPa)',
                  color='Pressure', color_continuous_scale=[[0, 'rgb(255, 255, 0)'], [1, 'rgb(255, 0, 0)']],
                  range_color=[0, 2000],  # 범위 설정
                  text='Pressure',
                  width=1000, height=800)

# 각 애니메이션 프레임에 대해 마커 모양 설정
for frame in fig1.frames:
    frame.data[0].marker.symbol = 'square'
    frame.data[0].marker.size = 45

import base64

# set a local image as a background
image_filename = 'insolegroup.png'
plotly_logo = base64.b64encode(open(image_filename, 'rb').read())

fig1.update_layout(
    images=[dict(
        source='data:image/png;base64,{}'.format(plotly_logo.decode()),
        xref="paper", yref="paper",
        x=0.5, y=0.5,
        sizex=1.1, sizey=1.1,
        xanchor="center",
        yanchor="middle",
        opacity=0.4,
        layer="below")])

# 그래프 레이아웃 설정
layout = go.Layout(
    title=dict(
        text='Foot Pressure Sensing (kPa)',
        x=0.5,  # 가운데 정렬
        xanchor='center',
        font=dict(size=18)  # 제목 폰트 크기
    ),
    xaxis=dict(
        title='',
        showticklabels=False,
        zeroline=False,
        showgrid=False  # x축 라벨 제거
    ),
    yaxis=dict(
        title='',
        showticklabels=False,
        zeroline=False  # y축 라벨 제거
    ),
    plot_bgcolor='rgba(0, 0, 0, 0)',  # 배경 투명하게 설정,

)

# 그래프 플롯
fig1.update_layout(layout)

# 그래프 크기 조정
fig1.update_layout(width=1000, height=800, xaxis=dict(showgrid=False), yaxis=dict(showgrid=False))

# 그래프 표시
fig1.show()

import plotly.express as px

# 그래프 생성
fig1 = px.scatter(df, x=[locations.get(loc, (0, 0))[0] for loc in df['loc']],
                  y=[locations.get(loc, (0, 0))[1] for loc in df['loc']],
                  animation_frame='Time', hover_name='loc',
                  range_x=[-500, 500], range_y=[0, 800], title='Left Pressure(kPa)',
                  color='Pressure', color_continuous_scale='YlOrRd_r',
                  range_color=[0, 2000],  # 범위 설정
                  text='Pressure',
                  width=1000, height=800)

# 각 애니메이션 프레임에 대해 마커 모양 설정
for frame in fig1.frames:
    frame.data[0].marker.symbol = 'square'
    frame.data[0].marker.size = 45

import base64

# set a local image as a background
image_filename = 'insolegroup.png'
plotly_logo = base64.b64encode(open(image_filename, 'rb').read())

fig1.update_layout(
    images=[dict(
        source='data:image/png;base64,{}'.format(plotly_logo.decode()),
        xref="paper", yref="paper",
        x=0.5, y=0.5,
        sizex=1.1, sizey=1.1,
        xanchor="center",
        yanchor="middle",
        opacity=0.4,
        layer="below")])

# 그래프 레이아웃 설정
layout = go.Layout(
    title=dict(
        text='Foot Pressure Sensing (kPa)',
        x=0.5,  # 가운데 정렬
        xanchor='center',
        font=dict(size=18)  # 제목 폰트 크기
    ),
    xaxis=dict(
        title='',
        showticklabels=False,
        zeroline=False,
        showgrid=False  # x축 라벨 제거
    ),
    yaxis=dict(
        title='',
        showticklabels=False,
        zeroline=False  # y축 라벨 제거
    ),
    plot_bgcolor='rgba(0, 0, 0, 0)',  # 배경 투명하게 설정,

)

# 그래프 플롯
fig1.update_layout(layout)

# 그래프 크기 조정
fig1.update_layout(width=1000, height=800, xaxis=dict(showgrid=False), yaxis=dict(showgrid=False))

# 그래프 표시
fig1.show()